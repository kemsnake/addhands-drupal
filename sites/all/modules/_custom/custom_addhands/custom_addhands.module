<?php

/*
* Implements hook_menu().
*/
function custom_addhands_menu(){
  $items = array();

  $items['main'] = array(
    'page callback' => '_custom_addhands_frontpage_callback',
    'access callback' => true,
    'title' => '',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/addhands'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_addhands_settings'),
    'access arguments' => array('administer site configuration'),
    'title' => 'Addhands',
  );

  $items['admin/config/addhands/settings'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Настройки addhands',
  );

  $items['user/%user/profile'] = array(
    'title' => 'Профиль',
    'access arguments' => array('cancel account'),
    'page callback' => '_custom_addhands_user_profile_callback',
    'page arguments' => array(1),
    'menu_name' => 'menu-user-profile',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%user/create_advert'] = array(
    'title' => 'Добавить объявление',
    'access arguments' => array('create advert_house_sell content'),
    'page callback' => '_custom_addhands_create_advert_callback',
    'page arguments' => array(1),
    'menu_name' => 'user-profile',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/publish'] = array(
    'title' => 'Publish Node',
    'page callback' => '_custom_addhands_change_advert_status',
    'page arguments' => array(1, '1', 3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/unpublish'] = array(
    'title' => 'Publish Node',
    'page callback' => '_custom_addhands_change_advert_status',
    'page arguments' => array(1, '0', 3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/delete'] = array(
    'title' => 'Publish Node',
    'page callback' => '_custom_addhands_delete_node',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_CALLBACK,
  );

  $items['test-search'] = array(
    'title' => 'test search',
    'page callback' => 'advert_search_callback',
    'page arguments' => array(1),
    'access arguments' => array('use search'),
  );

  $items['reload-search-results/%/%/%/%'] = array(
    'title' => 'reload_search_results',
    'page callback' => 'reload_search_results',
    'page arguments' => array(1,2,3,4),
    'access arguments' => array('use search'),
  );

  return $items;
}

/*
* Implements hook_menu_alter().
*/
function custom_addhands_menu_alter(&$items){
  $items['user/%user/edit']['menu_name'] = 'menu-user-profile';
  $items['node']['access callback'] = FALSE;
}

function _custom_addhands_user_profile_callback($user) {
  drupal_goto('user/' . $user->uid . '/adverts');
}

function _custom_addhands_create_advert_callback($user){
  $advert_types = array_filter(variable_get('node_advert_types', array()));
  $links = array();
  $type_names = node_type_get_names();
  $destination = 'user/' . arg(1) . '/adverts';
  foreach ($advert_types as $type){
    $links[] = l($type_names[$type], 'node/add/' . str_replace('_', '-', $type), array('query' => array('destination' => $destination)));
  }
  $output = theme('item_list', array(
    'items' => $links,
    'title' => 'Добавить',
  ));
  return $output;
}


function _custom_addhands_delete_node($node){
  if (is_object($node)){
    node_delete($node->nid);
  }
}

function _custom_addhands_change_advert_status($node, $status = NULL, $ajax = null){
  if (is_object($node) && isset($status)){
    $node->status = (int)$status;
    node_save($node);
    if (!is_null($ajax)){
      drupal_json_output(array('code'=>1, 'error' => ''));
    }
    else{
      if ($status == 0){
        drupal_set_message(t('Объявление !advert снято с публикации', array('!advert'=>$node->title)));
      }
      else{
        drupal_set_message(t('Объявление !advert опубликовано', array('!advert'=>$node->title)));
      }
      drupal_goto('user/' . $node->uid . '/adverts');
    }
  }
}

/*
 * Callback for frontpage hack
 */
function _custom_addhands_frontpage_callback(){
  drupal_set_title('');
  drupal_add_js(drupal_get_path('module', 'custom_addhands') . '/addhands.js');
  return '';
}

/*
 * Callback for frontpage hack
 */
function custom_addhands_settings($form, $form_state){
  $default_value_footer = variable_get('user_register_footer_text', array('value' => '', 'format' => 'full_html'));
  $form['user_register_footer_text'] = array(
    '#type' => 'text_format',
    '#title' => 'Футер формы регистрации пользователя',
    '#default_value' => $default_value_footer['value'],
    '#format' => $default_value_footer['format'],
  );

  $request_advert_info_form_code = variable_get('request_advert_info_form_code', array('value' => '', 'format' => 'full_html'));
  $form['request_advert_info_form_code'] = array(
    '#type' => 'text_format',
    '#title' => 'Код формы запроса информации об объявлении (форма 123contactform)',
    '#default_value' => $request_advert_info_form_code['value'],
    '#format' => 'full_html',
  );

  $form['node_advert_types'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Типы материалов для объявлений',
    '#default_value' => variable_get('node_advert_types', array()),
    '#options' => node_type_get_names(),
  );

  return system_settings_form($form);
}

/*
 * Implements hook_block_info().
 */
function custom_addhands_block_info(){
  $block['advert_price']['info'] = t('Цена объявления');
  $block['advert_updated']['info'] = t('Дата обновления объявления');
  $block['request_advert_info']['info'] = t('Запрос по объявлению');
  $block['footer_logo']['info'] = t('Footer Logo');
  $block['top_banner']['info'] = t('Верхний баннер');
  $block['user_header_dropdown_menu']['info'] = t('Header user dropdown menu');
  $block['user_header_menu']['info'] = t('Header user menu');
  return $block;
}

/*
* Implements hook_block_view().
*/
function custom_addhands_block_view($delta){
  $output = '';

  switch($delta){
    case 'advert_price':
      $node = node_load(arg(1));
      if (isset($node->field_price['und'][0]['value'])) {
        $output = 'Цена: ' . number_format($node->field_price['und'][0]['value'],0,',', ' ') . ' рублей  ';

        $output .= l('Заказать', current_path(), array('fragment' => 'row1'));
      }
      break;
    case 'advert_updated':
      $node = node_load(arg(1));
      if (isset($node->changed)) {
        $output = 'Дата обновления: ' . format_date($node->changed, 'custom', 'd.m.Y');
      }
      break;
    case 'request_advert_info':
      $request_advert_info_form_code = variable_get('request_advert_info_form_code', array('value' => '', 'format' => 'full_html'));
      $output = $request_advert_info_form_code['value'];
      break;
    case 'footer_logo':
      $output = '<div class="f-logo-wrapper">' . theme('image', array('path' => theme_get_setting('ilogo'), 'attributes' => array('class'=>'f-logo'))) . '</div>';
      $output .= '<div class="f-copy-wrapper">&copy;&nbsp' . date('Y') . '</div>';
      break;
    case 'top_banner':
      $nid = arg(1);
      $node = node_load($nid);
      if (isset($node->field_banner_image['und'][0]['uri'])){
        $banner_uri = $node->field_banner_image['und'][0]['uri'];
        $banner_img = theme('image_style', array(
          'style_name' => 'top_banner',
          'path' => $banner_uri,
        ));
        $output .= $banner_img;
      }
      break;
    case 'user_header_dropdown_menu':
      global $user;
      $arrow = '<span class="arrow-user-menu">&nbsp;</span>';
      $hello_msg = '<div class="hello-msg">Личный кабинет</div>';
      $output = '<div class="dropdown-link-div">' . l($arrow . $hello_msg, 'user', array('attributes' => array('id' => 'dropdown_link'), 'html' => true)) . '</div>';
      $output .= '<div class="header-dropdown">';
      $items = array();
      $items[] = l(t('Мои объявления'), 'user/' . $user->uid . '/adverts');
      $items[] = l(t('Создать объявление'), 'user/' . $user->uid . '/create_advert');
      $items[] = l(t('Редактировать данные'), 'user/' . $user->uid . '/edit');
      $items[] = l(t('Выход'), 'user/logout');
      $output .= theme('item_list', array('items' => $items));
      $output .='</div>';
      break;

    case 'user_header_menu':
      $uid = arg(1);
      $output = '<div class="header-user-menu">';
      $items = array();
      $items[] = l(t('Мои объявления'), 'user/' . $uid . '/adverts');
      $items[] = l(t('Создать объявление'), 'user/' . $uid . '/create_advert');
      $items[] = l(t('Редактировать данные'), 'user/' . $uid . '/edit');
      $output .= theme('item_list', array('items' => $items));
      $output .='</div>';
      break;

  }
  $block['content'] = $output;
  return $block;
}

/*
* Implements hook_node_view().
*/
function custom_addhands_node_view($node){
  // Убираем заголовок со всех страниц
  if ($node->type == 'page'){
    $node->title ='';
    //drupal_set_title('');
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function custom_addhands_field_formatter_info() {
  return array(
    'custom_addhands_term_reference_multicolumn_link' => array(
      'label' => t('Multicolumn Link'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function custom_addhands_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Terms whose tid is 'autocreate' do not exist
  // yet and $item['taxonomy_term'] is not set. Theme such terms as
  // just their name.
  switch ($display['type']) {
    case 'custom_addhands_term_reference_multicolumn_link':
      foreach ($items as $delta => $item) {
        $term = $item['taxonomy_term'];
        $uri = entity_uri('taxonomy_term', $term);
        $element[$delta] = array(
          '#type' => 'link',
          '#title' => $term->name,
          '#href' => $uri['path'],
          '#options' => $uri['options'],
          '#attributes' =>  ($item['status'] == 'active') ? array('class' => array('active')) : array('class' => array('inactive')),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function custom_addhands_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($field['settings']['allowed_values'][0]['vocabulary']);
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  if ($terms) {
    foreach ($entities as $id => $entity) {
      $active_items = array();
      foreach ($items[$id] as $item){
        $active_items[] = $item['tid'];
      }
      $delta = 0;
      foreach ($terms as $key => $term) {
        $items[$id][$delta]['taxonomy_term'] = $term;
        $items[$id][$delta]['tid'] = $term->tid;
        if (in_array($term->tid, $active_items)) {
          $items[$id][$delta]['status'] = 'active';
        }
        else {
          $items[$id][$delta]['status'] = 'inactive';
        }
        ++$delta;
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function custom_addhands_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $my_hook_implementation = $implementations['custom_addhands'];
    unset($implementations['custom_addhands']);
    $implementations['custom_addhands'] = $my_hook_implementation;
  }
}

/**
 * Implementationof hook_form_alter()
 * Removes name field from registration form
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function custom_addhands_form_alter(&$form, &$form_state, $form_id)
{

  if ($form_id == 'user_profile_form') {
    if (!user_access('administer users')){
      unset($form['locale']);
    }
  }
  if ($form_id == 'user_register_form') {
    drupal_add_js(drupal_get_path('module', 'custom_addhands') . '/addhands.js');
    if (isset($form['account']) && is_array($form['account'])) {
      $form['account']['name']['#access'] = FALSE;
      $form['account']['name']['#value'] = user_password();
    }
    else {
      $form['name']['#access'] = FALSE;
      $form['name']['#value'] = user_password();
    }

    $footer_text = variable_get('user_register_footer_text', array('value' => '', 'format' => 'full_html'));
    $form['user_register_footer_text'] = array(
      '#markup' => $footer_text['value'],
      '#weight' => 100,
    );
    $form['actions']['#weight'] = 101;
  }
  else if (in_array($form_id, array('advert_house_rent_node_form', 'advert_house_sell_node_form', 'advert_zone_sell_node_form'))) {
    //выводим чекбоксы деталей объявления в 3 колонки

    if (isset($form['field_comfort']['und']['#type']) && $form['field_comfort']['und']['#type'] == 'checkboxes'){

      $form['field_comfort']['und']['#theme'] = array('multicolumn_options');
      $form['field_comfort']['und']['#columns'] = 3;
      $form['field_comfort']['und']['#title'] = '';
    }
    if (isset($form['field_zone_details']['und']['#type']) && $form['field_zone_details']['und']['#type'] == 'checkboxes'){
      $form['field_zone_details']['und']['#theme'] = array('multicolumn_options');
      $form['field_zone_details']['und']['#columns'] = 3;
      $form['field_zone_details']['und']['#title'] = '';
    }
    if (isset($form['field_details']['und']['#type']) && $form['field_details']['und']['#type'] == 'checkboxes'){
      $form['field_details']['und']['#theme'] = array('multicolumn_options');
      $form['field_details']['und']['#columns'] = 3;
      $form['field_details']['und']['#title'] = '';
    }
  }
/*
  //edit user form
  if ($form_id == 'user_profile_form' && isset($form['account']['name']['#default_value'])){
    $form['account']['name']['#default_value'] = preg_replace('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', '_', $form['account']['name']['#default_value']);
  }*/
}

/**
 * Implements hook_user_presave().
 */
function custom_addhands_user_presave(&$edit, &$account, $category = NULL) {
  if (isset($edit['name']) && $account->is_new === TRUE){
    //Устанавливаем имя пользователя равное email
    $edit['name'] = $edit['mail'];
  }
}

/**
 * Implements hook_theme().
 */
function custom_addhands_theme() {
  return array(
    'multicolumn_options' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme function to format elements into multiple columns
 */
function theme_multicolumn_options($element) {
  $stripped_element = array_values($element);
  $element = $stripped_element[0];

  // Initialize variables.
  $output = '';
  $total_columns = (isset($element['#columns'])) ? $element['#columns'] : 2;
  $total_options = count($element['#options']);
  $options_per_column = ceil($total_options / $total_columns);
  $keys = array_keys($element['#options']);

  // Start wrapper div.
  $output .= '<div class="multicolumn-options-wrapper clearfix">';
  $current_column = 1;
  $current_option = 0;

  while ($current_column <= $total_columns) {
    // Start column div.
    $output .=  '<div class="multicolumn-options-column" style="width: ' . 100 / $total_columns . '%; float: left">';

    // Keep looping through until the maximum options per column are reached,
    // or you run out of options.
    while ($current_option < $options_per_column * $current_column
      && $current_option < $total_options) {

      // Output as either check or radio button depending on the element type.
      $output .= drupal_render($element[$keys[$current_option]]);
      $current_option++;
    }

    // End column div.
    $output .= '</div>';
    $current_column++;
  }

  // End wrapper div.
  $output .= '</div>';

  return $output;
}

function advert_search_callback($advert_type){

  /*$node = node_load(31);
  $map[] = array(
    'type' => 'Point',
    'coordinates' => $node->field_map['und'][0]['lon'] . ',' . $node->field_map['und'][0]['lat'],
  );
  $node = node_load(29);
  $map[] = array(
    'type' => 'Point',
    'coordinates' => $node->field_map['und'][0]['lon'] . ',' . $node->field_map['und'][0]['lat'],
  );
  $map = drupal_json_encode($map);
  dsm($map);

  $form['location'] = array(
    '#type' => 'geofield_ymap',
    '#title' => 'Location',
    '#description' => 'Select control and click to map for add object on map. Double click on object to remove it.',
    '#map_multiple' => TRUE,
    '#map_center' => array(55.733835, 37.588227),
    '#map_zoom' => 12,
    '#map_auto_centering' => TRUE,
    '#map_object_types' => array('point', 'line', 'polygon'),
    '#default_value' => '',
    //'#map_objects' => '{"type":"Point","coordinates":[37.62,55.75]}', // GeoJSON, optionaly
    '#map_objects' => $map,
  );

  return drupal_render($form);*/
  drupal_add_js(drupal_get_path('module', 'custom_addhands') . '/addhands.js');
  $view = views_get_view('advert_search');
  $view->set_display('page_1');
  $view->pre_execute();
  $view->execute();
  return  $view->render('page_1');

}

/*
 * Фильтруем объявления в поиске при изменении видимой области карты
 */
function reload_search_results($left, $top, $right, $bottom){
  $view = views_get_view('advert_search');
  $display_id = 'block_1';
  // Устанавливаем значения фильтров при изменении видимой области карты
  $view->set_display($display_id);
  $filter = $view->get_item($display_id, 'filter', 'field_map_lon');
  $filter['value']['min'] = $left;
  $filter['value']['max'] = $right;
  $view->set_item($display_id, 'filter', 'field_map_lon', $filter);
  $filter = $view->get_item($display_id, 'filter', 'field_map_lat');
  $filter['value']['min'] = $top;
  $filter['value']['max'] = $bottom;
  $view->set_item($display_id, 'filter', 'field_map_lat', $filter);
  // Подготовливаем и рендерим вью
  $view->pre_execute();
  $block_html = $view->render($display_id);
  // возвращаем хтмл в js для замены содержимого блока
  $result['block_html'] = $block_html;
//dsm($view);
  $adverts = array();
  foreach ($view->result as $row) {
    $coords = array();
    $advert = array();
    $coords[] = $row->field_field_map[0]['raw']['lon'];
    $coords[] = $row->field_field_map[0]['raw']['lat'];
    $advert['coords'] = $coords;
    $advert['baloon'] = 'test';
    $adverts[] = $advert;
  }
  /*$display_id = 'page_1';
  $view->set_display($display_id);
  $view->set_arguments(array('29,31'));
  $view->pre_execute();
  $results = views_get_view_result('advert_search', 'page_1', array('29,31'));
  $map_html = $view->render($display_id);*/
  // возвращаем хтмл в js для замены содержимого блока
  $result['adverts'] = $adverts;
  drupal_json_output($result);
}

/*
Друпал-Форма запроса информации об объявлении
function custom_addhands_request_advert_info_form($form, &$form_state, $nid){
  $form = array();

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  $form['user_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Ваше имя',
    '#default_value' => '',
    '#required' => 1
  );

  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => 'Ваш телефон',
    '#default_value' => '',
    '#required' => 1
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Электронный адрес',
    '#default_value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Отправить запрос',
    '#prefix' => '<div class="request-form-submit">',
    '#suffix' => '</div>',
  );

  return $form;
}

function custom_addhands_request_advert_info_form_submit($form, &$form_state){
  $node = node_load($form_state['values']['nid']);
  if ($node){

  }
  else {
    drupal_set_message('Запрашиваемое вами объявление не существует.');
  }
}*/